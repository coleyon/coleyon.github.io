var tipuesearch = {"pages":[{"title":"Discord の Bot に定時実行をさせてみよう","text":"Discord の Bot に Cron のような定時処理をさせる方法を紹介します。 Python と discord.py を使用します。 要点 discord.py を使って python で開発する。 discord.ext.tasks でバックグラウンドループを実現する。 Code croniter で各ループ（タイミング）におけるジョブの発火要否判定を実現する。 Code Command.invoke() で Bot による Bot コマンドの実行を実現する。 Code やってみた discord.py を使って、オンラインゲームのクエストや対戦マッチング相手を募集する時に使える Bot を作り、1 か月ほど実際に使ってみましたので、記事にしてみます。 概略仕様 コード一式 論よりコードの方はこちら。 https://github.com/coleyon/discord-partypoll 機能 ざっくり言えば、以下 2 つの機能から成る Bot です。 PartyPoll - SimplePoll に似た、イベントの周知と参加者募集ができる機能。 Cron - PartyPoll のコマンドを Bot 自身に、 cron ライクな設定書式でスケジューリング・定時実行させる機能 環境 Python プログラムとしての Bot が、Docker コンテナ上で実行される構成です。 環境構築 サーバと OS を用意する 例えば EC2 上に、 Ubuntu 18.04 LTS x86-64 を立てます。無料利用枠内で十分です。 Docker サーバ環境をインストールする docker と compose をインストールします。 https://docs.docker.com/engine/install/ubuntu/ https://docs.docker.com/compose/install/ Docker サーバ環境をインストールする こんな風になったと思います。 $ docker --version Docker version 19 .03.12, build 48a66213fe $ docker-compose --version docker-compose version 1 .27.2, build 18f557f9 $ id uid = 1000 ( ubuntu ) gid = 1000 ( ubuntu ) , # 中略 ... ,999 ( docker ) $ Docker コンテナをビルドする $ git clone https://github.com/coleyon/discord-partypoll.git Cloning into 'discord-partypoll' ... ... Resolving deltas: 100 % ( 136 /136 ) , done . $ cd discord-partypoll/ $ docker-compose build $ docker images | grep partypoll discord-partypoll_discord-bot latest ... $ Bot を Discord サーバに誘う Discord アプリを作る Developer Portal 上でアプリケーションを作成します。 Bot の OAuth2 Token を Bot プログラムにセットする アプリの General Information メニューから Client Secret を得て、 docker-compose.yml の DISCORD_BOT_TOKEN にセットします。 version : \"3\" services : discord-bot : restart : always build : . environment : DISCORD_BOT_TOKEN : \"yourtoken\" Bot を Discord サーバに誘う アプリの OAuth2 メニューから Scopes が BOT となる OAuth2 URL を得ます Permissions は Send Messages , Manage Messages , Attach Files , Mention Everyone , Add Reactions を与えてください。 Bot を Discord サーバに誘う OAuth2 URL にブラウザでアクセスし、Bot を Discord サーバに招きます。 Bot プログラムを起動する Bot プログラムの依存ライブラリを生成する Pipfile から requirements.yml を生成します。 $ pipenv lock -r > requirements.txt Bot プログラムを起動する Bot プログラム（の実行環境としての Docker コンテナ）を起動します。 $ docker-compose up -d $ docker-compose logs -f Attaching to discord-partypoll_discord-bot_1 discord-bot_1 | -----Logged in info----- discord-bot_1 | { BOT_NAME } discord-bot_1 | { BOT_ID } discord-bot_1 | { DISCORDPY_VERSION } discord-bot_1 | ------------------------ discord-bot_1 | Poll Extension Enabled. discord-bot_1 | Cron Extension Enabled. &#94;CERROR: Aborting. $ Bot プログラムを起動すると、Discord 上の Bot がオンラインとなり、使用可能な状態になります。 パーティ募集コマンド ppoll を使ってみる 募集全体の人数制限が可能な募集 チーム全体で計 20 名までを上限とするパーティの募集をするコマンドです。 /ppoll total 全 20 名 3 チーム 20 TeamA TeamB TeamC 個々の募集項目毎に人数制限が可能な募集 個々のチームで計 4 名までを上限とするパーティの募集をするコマンドです。 /ppoll each 各 4 名 3 チーム [4]TeamA [4]TeamB [4]TeamC ヘルプコマンド 詳しくは /ppoll help コマンドの説明か、Git リポジトリの readme.md をご覧ください。 定時実行コマンド cron を使ってみる 実行タイムゾーン指定 実行 Timezone を設定できます。デフォルトは日本時間 (Asia/Tokyo) ですが、米国東部時間 (EST) などに設定することもできます。 ジョブの定義と有効化 Job を定義します。 /cron add \"Job A\" */1 * * * mon-fri /ppoll each 各 4 名 3 チームパーティ ({{1.days}} 開催 !) [4]TeamA [4]TeamB [4]TeamC cron を稼働状態にします (2020/10/30 23:11 に実行したとします ) /cron enable ジョブの稼働例 こうなります。詳しくは /cron help コマンドの説明か、Git リポジトリの readme.md をご覧ください。 参考資料 基本的に 公式 Docs がバイブルですが、作っている途中でオンラインゲームのメンバーさんより、以下の本をご紹介頂きました。 読んだところとても分かりやすく公式マニュアルでは把握できなかった内容が多々あったりして有用でしたので、Discord の Bot 作りに興味がある方にはオススメです。 Python で作る Discord Bot 開発実践入門 https://techbookfest.org/product/5755158612934656?productVariantID=5633838124367872","tags":"programming","url":"https://coleyon.github.io/discord, bot, programming.html","loc":"https://coleyon.github.io/discord, bot, programming.html"},{"title":"screen コマンドを使った linux terminal セッション共有","text":"Screen コマンドを使うと、Linux コンソールを複数ユーザセッション間で共有できます。 参考 みやすい概要 https://mistymagich.wordpress.com/2011/11/08/multiuser_screen_command multiuser mode 権限制御系操作 http://aperiodic.net/screen/multiuser ユースケース Dev チームのペアプログラミングよろしく、Ops チームにも部下育成やダブルチェックを兼ねて、Linux サーバオペレーションを複数名で行う場合があります。そんな時は、物理コンソールに人が集まって行うのもよいですが、ターミナルのセッションを SSH で皆が共有できる Screen を使うと捗ります。 環境例 Debian Jessie + 共有元ユーザ : parent 共有先ユーザ : child 事前準備 screen インストール sudoer@test:~$ sudo apt-get update && sudo apt-get install screen screen セッションを各ユーザで共有可能にする設定 ## sudoer console sudoer@test:~$ sudo chmod u+s /usr/bin/screen sudoer@test:~$ sudo chmod 755 /var/run/screen セッション公開 screen セッション share を立てる ## parent console parent@test:~$ screen -S share child ユーザへ share セッションを共有する ## parent console parent@test:~$ ( Ctrl+a ) :multiuser on Multiuser mode enabled parent@test:~$ ( Ctrl+a ) :acladd child parent@test:~$ セッション参加 parent ユーザが立てた screen のセッション名を確認し、乗り込む ## child console child@test:~$ screen -ls parent/ There is a suitable screen on: 1448 .share ( 03 /07/2017 10 :49:09 AM ) ( Multi, attached ) 1 Socket in /var/run/screen/S-parent. child@test:~$ screen -x parent/share ログアウトとデタッチの動作 parent ユーザが screen セッションとして起動されている login セッションからログアウトする ## parent console parent@test:~$ exit [ screen is terminating ] parent@test:~$ child ユーザが screen セッションとして起動されている login セッションからログアウトする ## child console parent@test:~$ exit [ screen is terminating ] child@test:~$ parent ユーザが screen セッション share をデタッチする ## parent console parent@test:~$ ( Ctrl+A ) ( d ) [ detached from 1448 .share ] parent@test:~$ child ユーザが screen セッション share をデタッチする ## child console parent@test:~$ ( Ctrl+A ) ( d ) [ detached from 1448 .share ] child@test:~$","tags":"howto","url":"https://coleyon.github.io/screen.html","loc":"https://coleyon.github.io/screen.html"}]};