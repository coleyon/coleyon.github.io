<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wof</title><link href="https://coleyon.github.io/" rel="alternate"/><link href="https://coleyon.github.io/feeds/all.atom.xml" rel="self"/><id>https://coleyon.github.io/</id><updated>2020-12-01T12:00:00+09:00</updated><subtitle>Techblog</subtitle><entry><title>Discord の Bot に定時実行をさせてみよう</title><link href="https://coleyon.github.io/discord,%20bot,%20programming.html" rel="alternate"/><published>2020-12-01T12:00:00+09:00</published><updated>2020-12-01T12:00:00+09:00</updated><author><name>coleyon</name></author><id>tag:coleyon.github.io,2020-12-01:/discord, bot, programming.html</id><summary type="html">&lt;p&gt;Discord の Bot に Cron のような定時処理をさせる方法を紹介します。&lt;/p&gt;</summary><content type="html">&lt;p&gt;Discord の Bot に Cron のような定時処理をさせる方法を紹介します。
Python と discord.py を使用します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discordpy.readthedocs.io/ja/latest/index.html"&gt;discord.py&lt;/a&gt; を使って python で開発する。&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discordpy.readthedocs.io/ja/latest/ext/tasks/"&gt;discord.ext.tasks&lt;/a&gt; でバックグラウンドループを実現する。&lt;a href="https://github.com/coleyon/discord-partypoll/blob/665f81bd89964fa061ca964d0c3e70c6133b5f01/cogs/cron.py#L123"&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/croniter/"&gt;croniter&lt;/a&gt; で各ループ（タイミング）におけるジョブの発火要否判定を実現する。&lt;a href="https://github.com/coleyon/discord-partypoll/blob/665f81bd89964fa061ca964d0c3e70c6133b5f01/cogs/cron.py#L127"&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordpy.readthedocs.io/ja/latest/ext/commands/api.html#discord.ext.commands.Bot.after_invoke"&gt;Command.invoke()&lt;/a&gt; で Bot による Bot コマンドの実行を実現する。&lt;a href="https://github.com/coleyon/discord-partypoll/blob/665f81bd89964fa061ca964d0c3e70c6133b5f01/cogs/cron.py#L167"&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;やってみた&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/discord.py/"&gt;discord.py&lt;/a&gt; を使って、オンラインゲームのクエストや対戦マッチング相手を募集する時に使える Bot を作り、1 か月ほど実際に使ってみましたので、記事にしてみます。&lt;/p&gt;
&lt;h1&gt;概略仕様&lt;/h1&gt;
&lt;h2&gt;コード一式&lt;/h2&gt;
&lt;p&gt;論よりコードの方はこちら。
&lt;a href="https://github.com/coleyon/discord-partypoll"&gt;https://github.com/coleyon/discord-partypoll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;機能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ざっくり言えば、以下 2 つの機能から成る Bot です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PartyPoll&lt;/code&gt; - &lt;a href="https://top.gg/bot/simplepoll"&gt;SimplePoll&lt;/a&gt; に似た、イベントの周知と参加者募集ができる機能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cron&lt;/code&gt; - PartyPoll のコマンドを Bot 自身に、 &lt;a href="https://linuxjm.osdn.jp/html/cron/man5/crontab.5.html#lbAD"&gt;cron&lt;/a&gt; ライクな設定書式でスケジューリング・定時実行させる機能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;環境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python プログラムとしての Bot が、Docker コンテナ上で実行される構成です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/discord-cronlike-scheduling-2021-05-29-23-05-11.png"/&gt;&lt;/p&gt;
&lt;h1&gt;環境構築&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;サーバと OS を用意する&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例えば EC2 上に、&lt;code&gt;Ubuntu 18.04 LTS x86-64&lt;/code&gt; を立てます。無料利用枠内で十分です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/discord-cronlike-scheduling-2021-05-29-22-15-59.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker サーバ環境をインストールする&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;docker と compose をインストールします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;https://docs.docker.com/engine/install/ubuntu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/"&gt;https://docs.docker.com/compose/install/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Docker サーバ環境をインストールする&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;こんな風になったと思います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ docker --version
Docker version &lt;span class="m"&gt;19&lt;/span&gt;.03.12, build 48a66213fe
$ docker-compose --version
docker-compose version &lt;span class="m"&gt;1&lt;/span&gt;.27.2, build 18f557f9
$ id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ubuntu&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ubuntu&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="c1"&gt;# 中略 ...&lt;/span&gt;
,999&lt;span class="o"&gt;(&lt;/span&gt;docker&lt;span class="o"&gt;)&lt;/span&gt;
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Docker コンテナをビルドする&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git clone  https://github.com/coleyon/discord-partypoll.git
Cloning into &lt;span class="s1"&gt;'discord-partypoll'&lt;/span&gt;...
...
Resolving deltas: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;136&lt;/span&gt;/136&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
$ &lt;span class="nb"&gt;cd&lt;/span&gt; discord-partypoll/
$ docker-compose build
$ docker images &lt;span class="p"&gt;|&lt;/span&gt; grep partypoll
discord-partypoll_discord-bot  latest ...
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Bot を Discord サーバに誘う&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Discord アプリを作る&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://discord.com/developers/applications"&gt;Developer Portal&lt;/a&gt; 上でアプリケーションを作成します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/discord-cronlike-scheduling-2021-05-29-22-16-20.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bot の OAuth2 Token を Bot プログラムにセットする&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;アプリの &lt;code&gt;General Information&lt;/code&gt; メニューから &lt;code&gt;Client Secret&lt;/code&gt; を得て、&lt;code&gt;docker-compose.yml&lt;/code&gt; の &lt;code&gt;DISCORD_BOT_TOKEN&lt;/code&gt; にセットします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"3"&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;discord-bot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="nt"&gt;DISCORD_BOT_TOKEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"yourtoken"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Bot を Discord サーバに誘う&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;アプリの &lt;code&gt;OAuth2&lt;/code&gt; メニューから Scopes が BOT となる OAuth2 URL を得ます Permissions は &lt;code&gt;Send Messages&lt;/code&gt;, &lt;code&gt;Manage Messages&lt;/code&gt;, &lt;code&gt;Attach Files&lt;/code&gt;, &lt;code&gt;Mention Everyone&lt;/code&gt;, &lt;code&gt;Add Reactions&lt;/code&gt; を与えてください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bot を Discord サーバに誘う&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OAuth2 URL にブラウザでアクセスし、Bot を Discord サーバに招きます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/discord-cronlike-scheduling-2021-05-29-22-16-29.png"/&gt;&lt;/p&gt;
&lt;h1&gt;Bot プログラムを起動する&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Bot プログラムの依存ライブラリを生成する&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pipfile&lt;/code&gt; から &lt;code&gt;requirements.yml&lt;/code&gt; を生成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv lock -r &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Bot プログラムを起動する&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bot プログラム（の実行環境としての Docker コンテナ）を起動します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ docker-compose up -d
$ docker-compose logs -f
Attaching to discord-partypoll_discord-bot_1
discord-bot_1  &lt;span class="p"&gt;|&lt;/span&gt; -Logged &lt;span class="k"&gt;in&lt;/span&gt; info-
discord-bot_1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;BOT_NAME&lt;span class="o"&gt;}&lt;/span&gt;
discord-bot_1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;BOT_ID&lt;span class="o"&gt;}&lt;/span&gt;
discord-bot_1  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;DISCORDPY_VERSION&lt;span class="o"&gt;}&lt;/span&gt;
discord-bot_1  &lt;span class="p"&gt;|&lt;/span&gt; 
discord-bot_1  &lt;span class="p"&gt;|&lt;/span&gt; Poll Extension Enabled.
discord-bot_1  &lt;span class="p"&gt;|&lt;/span&gt; Cron Extension Enabled.
^CERROR: Aborting.
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bot プログラムを起動すると、Discord 上の Bot がオンラインとなり、使用可能な状態になります。&lt;/p&gt;
&lt;h1&gt;パーティ募集コマンド ppoll を使ってみる&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;募集全体の人数制限が可能な募集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;チーム全体で計 20 名までを上限とするパーティの募集をするコマンドです。 &lt;code&gt;/ppoll total 全 20 名 3 チーム 20 TeamA TeamB TeamC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/discord-cronlike-scheduling-2021-05-29-22-16-51.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;個々の募集項目毎に人数制限が可能な募集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;個々のチームで計 4 名までを上限とするパーティの募集をするコマンドです。 &lt;code&gt;/ppoll each 各 4 名 3 チーム [4]TeamA [4]TeamB [4]TeamC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/discord-cronlike-scheduling-2021-05-29-22-16-58.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ヘルプコマンド&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;詳しくは &lt;code&gt;/ppoll help&lt;/code&gt; コマンドの説明か、Git リポジトリの &lt;a href="https://github.com/coleyon/discord-partypoll/blob/master/README.md"&gt;readme.md&lt;/a&gt; をご覧ください。&lt;/p&gt;
&lt;h1&gt;定時実行コマンド cron を使ってみる&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;実行タイムゾーン指定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;実行 Timezone を設定できます。デフォルトは日本時間 (Asia/Tokyo) ですが、米国東部時間 (EST) などに設定することもできます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/discord-cronlike-scheduling-2021-05-29-22-17-28.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ジョブの定義と有効化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Job を定義します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/cron add "Job A" */1 * * * mon-fri /ppoll each 各 4 名 3 チームパーティ ({{1.days}} 開催 !) [4]TeamA [4]TeamB [4]TeamC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cron を稼働状態にします (2020/10/30 23:11 に実行したとします )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/cron enable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ジョブの稼働例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;こうなります。詳しくは &lt;code&gt;/cron help&lt;/code&gt; コマンドの説明か、Git リポジトリの &lt;a href="https://github.com/coleyon/discord-partypoll/blob/master/README.md"&gt;readme.md&lt;/a&gt; をご覧ください。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/discord-cronlike-scheduling-2021-05-29-22-17-08.png"/&gt;&lt;/p&gt;
&lt;h1&gt;参考資料&lt;/h1&gt;
&lt;p&gt;基本的に&lt;a href="https://discordpy.readthedocs.io/en/latest/"&gt;公式 Docs&lt;/a&gt;がバイブルですが、作っている途中でオンラインゲームのメンバーさんより、以下の本をご紹介頂きました。&lt;/p&gt;
&lt;p&gt;読んだところとても分かりやすく公式マニュアルでは把握できなかった内容が多々あったりして有用でしたので、Discord の Bot 作りに興味がある方にはオススメです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python で作る Discord Bot 開発実践入門&lt;ul&gt;
&lt;li&gt;&lt;a href="https://techbookfest.org/product/5755158612934656?productVariantID=5633838124367872"&gt;https://techbookfest.org/product/5755158612934656?productVariantID=5633838124367872&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"/><category term="discord"/><category term="python"/><category term="bot"/></entry><entry><title>GCP KMS を使って秘密情報を対称暗号化・復号化する</title><link href="https://coleyon.github.io/googleapis,%20python,%20programming.html" rel="alternate"/><published>2019-10-23T12:00:00+09:00</published><updated>2019-10-23T12:00:00+09:00</updated><author><name>coleyon</name></author><id>tag:coleyon.github.io,2019-10-23:/googleapis, python, programming.html</id><summary type="html">&lt;p&gt;KMSを利用して、認証情報などの秘密を暗号化・復号化する方法を紹介します&lt;/p&gt;</summary><content type="html">&lt;h1&gt;概要&lt;/h1&gt;
&lt;p&gt;KMS を利用して、認証情報などの秘密を暗号化・復号化する方法を紹介します&lt;/p&gt;
&lt;h1&gt;サンプルコードと環境&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;サンプルコード&lt;/strong&gt;:
この記事は、連載の 1 つ前の記事で作成した &lt;a href="https://github.com/coleyon/gcalapi-caldav-sample"&gt;バッチスクリプトのコード&lt;/a&gt; を例にした続きの内容です。
コードを動かしたい人は、この記事よりも &lt;a href="https://github.com/coleyon/gcalapi-caldav-sample/tree/kms-enc-dec"&gt;readme.md&lt;/a&gt; 見てもらうと早いです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（前記事）対策前のコード : &lt;a href="https://github.com/coleyon/gcalapi-caldav-sample/tree/master"&gt;https://github.com/coleyon/gcalapi-caldav-sample/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;（今記事）対策後のコード : &lt;a href="https://github.com/coleyon/gcalapi-caldav-sample/tree/kms-enc-dec"&gt;https://github.com/coleyon/gcalapi-caldav-sample/tree/kms-enc-dec&lt;/a&gt; (&lt;a href="https://github.com/coleyon/gcalapi-caldav-sample/commit/1b247827a1d5feaa34a6de3e095a04c6ceee8dc8#diff-5bc02cefb3ea9e27f1a6776eabd1935d"&gt;Diff&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;対策前のコードでは Calendar API を叩くために GCP サービスアカウントの鍵 &lt;code&gt;credential.json&lt;/code&gt; ファイルを認証情報として利用しますが、暗号化せずコードに同梱しています。
対策後のコードでは、KMS を利用して鍵 &lt;code&gt;credential.json&lt;/code&gt; の内容を暗号化し、かつ暗号化した鍵をコードに含めない（Cloud Functions 実行時に環境変数で与える）ことでセキュリティを向上しています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;環境&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;灰色アローは手作業、青アローはプログラム処理です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/howto-encripting-secrets-using-google-kms-2021-05-29-22-56-39.png"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生 JSON 鍵を得て KMS で対称暗号化し、バイナリ暗号鍵を得る&lt;/li&gt;
&lt;li&gt;バイナリ暗号鍵を ASCII 化し、Cloud Functions の環境変数にセットする&lt;/li&gt;
&lt;li&gt;コードは git、暗号鍵は環境変数をソースとして、Cloud Functions 上にデプロイする&lt;/li&gt;
&lt;li&gt;Cloud Functions 上のスクリプトは、暗号鍵を KMS API で復号化する&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;GKE KeyRing を作る&lt;/h1&gt;
&lt;p&gt;暗号鍵メニューから、キーリングを適当な名前で作ります。今回は、今後も増えるだろうサービスアカウントのクレデンシャルをたくさんぶら下げるためのキーリング名にしました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/howto-encripting-secrets-using-google-kms-2021-05-29-22-56-49.png"/&gt;&lt;/p&gt;
&lt;h1&gt;GKE Key を作る&lt;/h1&gt;
&lt;p&gt;キーリングにぶら下げるキーを作ります。Calendar API アクセス用サービスアカウントの JSON 形式のクレデンシャルである事を端的に示すキー名で作りました。目的は&lt;code&gt;対称暗号化 / 復号化&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/howto-encripting-secrets-using-google-kms-2021-05-29-22-56-57.png"/&gt;&lt;/p&gt;
&lt;p&gt;サービスアカウントは強い権限（プロジェクトの管理者）を持たせる事が多いと思いますが、ローテーションを自動でかけて同じ暗号を使い続けないように設定する事もできます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/howto-encripting-secrets-using-google-kms-2021-05-29-22-57-13.png"/&gt;&lt;/p&gt;
&lt;h1&gt;秘密を暗号化する&lt;/h1&gt;
&lt;p&gt;作業に先立って、生クレデンシャル JSON ファイルは、非公開の Storage &lt;code&gt;private-bucket&lt;/code&gt; を介してアップロードします。&lt;/p&gt;
&lt;p&gt;暗号化は CloudShell で作業をします。サービスアカウントの JSON 形式生クレデンシャル&lt;code&gt;credentials.json&lt;/code&gt;を暗号化して、バイナリファイル&lt;code&gt;credentials.json.enc&lt;/code&gt; を得ます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ gsutil cp gs://private-bucket/credentials.json ./
$ gcloud kms encrypt &lt;span class="se"&gt;\&lt;/span&gt;
    --plaintext-file&lt;span class="o"&gt;=&lt;/span&gt;./credentials.json &lt;span class="se"&gt;\&lt;/span&gt;
    --ciphertext-file&lt;span class="o"&gt;=&lt;/span&gt;credentials.json.enc &lt;span class="se"&gt;\&lt;/span&gt;
    --location&lt;span class="o"&gt;=&lt;/span&gt;global &lt;span class="se"&gt;\&lt;/span&gt;
    --keyring&lt;span class="o"&gt;=&lt;/span&gt;service-account-credentials &lt;span class="se"&gt;\&lt;/span&gt;
    --key&lt;span class="o"&gt;=&lt;/span&gt;gcal-api-json-cred &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm ./credentials.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;暗号化文字列を得る&lt;/h1&gt;
&lt;p&gt;アプリケーションで取り扱いやすい様に Python で&lt;code&gt;credentials.json.enc&lt;/code&gt;を文字列に変換します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python
&amp;gt;&amp;gt;&amp;gt; import base64, io
&amp;gt;&amp;gt;&amp;gt; with io.open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'credentials.json.enc'&lt;/span&gt;, &lt;span class="s1"&gt;'rb'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; as f:
&amp;gt;&amp;gt;&amp;gt;     base64.b64encode&lt;span class="o"&gt;(&lt;/span&gt;f.read&lt;span class="o"&gt;())&lt;/span&gt;.decode&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ascii'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
QOsAErqw....bI&lt;span class="o"&gt;=&lt;/span&gt;   &lt;span class="c1"&gt;# 暗号化されたクレデンシャル文字列&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;+  Stopped                 python
$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;logout&lt;/span&gt;
There are stopped jobs.
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;秘密を復号化する&lt;/h1&gt;
&lt;p&gt;次のようなコードでもって、復号化して使います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;b64decode&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;google.oauth2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;service_account&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;googleapiclient.discovery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decrypt_credectial&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;kms_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cloudkms'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'v1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'projects/&lt;/span&gt;&lt;span class="si"&gt;{pj}&lt;/span&gt;&lt;span class="s1"&gt;/locations/&lt;/span&gt;&lt;span class="si"&gt;{loc}&lt;/span&gt;&lt;span class="s1"&gt;/keyRings/&lt;/span&gt;&lt;span class="si"&gt;{key_ring}&lt;/span&gt;&lt;span class="s1"&gt;/cryptoKeys/&lt;/span&gt;&lt;span class="si"&gt;{key}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;pj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Google のプロジェクト ID'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'KMS キーリングのロケーション。本例だと global'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;key_ring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'KMS キーリング名 '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'KMS キー名 '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;crypto_keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kms_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locations&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cryptoKeys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;kms_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;crypto_keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'ciphertext'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;' 暗号化クレデンシャル '&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;kms_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kms_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kms_response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'plaintext'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ascii'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;creds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;service_account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Credentials&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_service_account_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;decrypt_credectial&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;scopes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'https://www.googleapis.com/auth/calendar.events.readonly'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'https://www.googleapis.com/auth/calendar.readonly'&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username@gsuite-domain'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前記事のコードと比べて&lt;a href="https://github.com/coleyon/gcalapi-caldav-sample/commit/1b247827a1d5feaa34a6de3e095a04c6ceee8dc8#diff-5bc02cefb3ea9e27f1a6776eabd1935d"&gt;このような違い&lt;/a&gt;があります。生クレデンシャルを文字列やファイルとしてソースコードに含める必要が無くなって、安心感が出ました。&lt;/p&gt;</content><category term="howto"/><category term="GoogleAPI"/><category term="python"/></entry><entry><title>GCP で Google Calendar を CalDAV サーバに複製する</title><link href="https://coleyon.github.io/google,%20python,%20programming.html" rel="alternate"/><published>2019-10-02T00:00:00+09:00</published><updated>2019-10-02T00:00:00+09:00</updated><author><name>coleyon</name></author><id>tag:coleyon.github.io,2019-10-02:/google, python, programming.html</id><summary type="html">&lt;p&gt;Python バッチスクリプトで Google Calendar からスケジュール情報を採取し、CalDAV サーバへ複製する例を紹介します。&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python バッチスクリプトで Google Calendar からスケジュール情報を採取し、CalDAV サーバへ複製する例を紹介します。&lt;/p&gt;
&lt;h1&gt;概要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;GSuite 上の任意のユーザの Calendar に、Google Calendar API を介してアクセスする&lt;/li&gt;
&lt;li&gt;GCP の Cloud Functions にデプロイした Python バッチスクリプトを、Cloud Scheduler + Pub/Sub で定時実行する&lt;/li&gt;
&lt;li&gt;API アクセス認証を GCP の&lt;a href="https://cloud.google.com/iam/docs/service-accounts?hl=ja"&gt;サービスアカウント&lt;/a&gt;キーで行い、個々のカレンダーオーナーからのアクセス許可は不要とする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;サンプルコード&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/coleyon/gcalapi-caldav-sample"&gt;https://github.com/coleyon/gcalapi-caldav-sample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;構成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;グレーは環境設定、ブルーはバッチ処理です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/copy-gcal-to-caldav-with-gcp-2021-05-29-22-29-42.png"/&gt;&lt;/p&gt;
&lt;h1&gt;1. GSuite で API アクセスを許可する&lt;/h1&gt;
&lt;p&gt;アクセス対象としたいカレンダーが存在する GSuite 環境に対して、外部からの API アクセスを受付可能に設定をします。公式ドキュメントの、&lt;a href="https://support.google.com/a/answer/60757?hl=ja"&gt;管理コンソールで API アクセスを有効にする&lt;/a&gt; 手順になります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API リファレンスを有効にする&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-30-11.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API アクセスを有効にする&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-30-46.png"/&gt;&lt;/p&gt;
&lt;h1&gt;2. GCP にサービスアカウントを作成しキーを得る&lt;/h1&gt;
&lt;p&gt;今回は &lt;code&gt;サービスアカウントキー&lt;/code&gt; を用いた認証ストラテジで Calendar API を利用します。なお、サービスアカウントではなくパーソナルなアカウントの認証ストラテジで API を利用する方式もありますが、当記事では対象外です。認証ストラテジの選択肢と差の解説は、&lt;a href="https://cloud.google.com/docs/authentication/?hl=ja#authentication_strategies"&gt;こちらの公式ドキュメント&lt;/a&gt;が分かりよいと思います。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IAM と管理&lt;/code&gt; &amp;gt; &lt;code&gt;サービスアカウント&lt;/code&gt; でサービスアカウントを作成します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-31-18.png"/&gt;&lt;/p&gt;
&lt;p&gt;サービスアカウントの鍵を生成し、JSON 形式で取得します。鍵は、バッチスクリプトが API アクセス認証時に使います。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-31-33.png"/&gt;
&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-31-42.png"/&gt;&lt;/p&gt;
&lt;p&gt;サービスアカウントのクライアント ID を確認します。クライアント ID は、バッチスクリプトの認証情報および、GSuite の API クライアントアクセス許可対象として使います。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/copy-gcal-to-caldav-with-gcp-2021-05-29-22-31-48.png"/&gt;&lt;/p&gt;
&lt;h1&gt;3. GSuite で API クライアントアクセスを許可する&lt;/h1&gt;
&lt;p&gt;GSuite で、どのリソースに対する API アクセス操作を、誰に許可するかを設定します。設定手順は、&lt;a href="https://support.google.com/a/answer/162106?hl=ja"&gt;OAuth: API クライアント アクセスの管理&lt;/a&gt; になります。&lt;/p&gt;
&lt;p&gt;設定内容は、&lt;code&gt;クライアント名&lt;/code&gt; には先に GCP 上で作成したサービスアカウントの &lt;code&gt;クライアント ID&lt;/code&gt; を指定し、
&lt;code&gt;スコープ&lt;/code&gt; には &lt;code&gt;https://www.googleapis.com/auth/calendar.readonly&lt;/code&gt;, &lt;code&gt;https://www.googleapis.com/auth/calendar.events.readonly&lt;/code&gt; を指定して承認します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-32-24.png"/&gt;&lt;/p&gt;
&lt;p&gt;余談ですが、指定可能なスコープと API の仕様は &lt;a href="https://developers.google.com/identity/protocols/googlescopes#calendarv3"&gt;API リファレンス&lt;/a&gt; に書かれています。&lt;/p&gt;
&lt;h1&gt;4. CalDAV サーバを立てる&lt;/h1&gt;
&lt;p&gt;当サンプルでは、CalDAV サーバである &lt;a href="https://radicale.org/"&gt;Radicale&lt;/a&gt; に、Google Calendar から採取した情報を吐き出して、ユーザに利用させます。試験版の Radicale は &lt;a href="https://hub.docker.com/search?q=radicale&amp;amp;type=image"&gt;docker コンテナ&lt;/a&gt; で立てるのが手っ取り早いです。&lt;/p&gt;
&lt;p&gt;起動するとこんな感じです。サーバの URL がアプリに与える環境変数の &lt;code&gt;CALDAV_SERVER_URL&lt;/code&gt;、 ログイン情報が &lt;code&gt;CALDAV_SERVER_USER&lt;/code&gt;, &lt;code&gt;CALDAV_SERVER_PASS&lt;/code&gt; です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-32-43.png"/&gt;&lt;/p&gt;
&lt;p&gt;ログインすると、即カレンダーの作成画面になりますので、こんな感じで作ります。Title がカレンダー名であり、アプリに与える環境変数の &lt;code&gt;CALDAV_SERVER_CALENDAR_NAME&lt;/code&gt; です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-32-49.png"/&gt;&lt;/p&gt;
&lt;p&gt;作成したカレンダーの URL は、&lt;code&gt;http://${HOSTNAME}:5232/${USERNAME}/${CALENDAR_ID}/&lt;/code&gt; になり、環境変数 &lt;code&gt;CALDAV_SERVER_URL&lt;/code&gt; に相当します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-32-55.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;余談&lt;ul&gt;
&lt;li&gt;CalDAV サーバは、例えば Thunderbird のカレンダー拡張（Lightning）のようなクライアントから参照・同期できる、ネットワークカレンダーサーバの規格です。&lt;a href="https://tools.ietf.org/html/rfc4791"&gt;RFC 4791&lt;/a&gt;で仕様が定義されており、いわゆる iCAL 形式 (&lt;a href="https://tools.ietf.org/html/rfc2445"&gt;RFC 2445&lt;/a&gt;) でデータ交換をします。&lt;/li&gt;
&lt;li&gt;そもそもカレンダーというモノは、割と面倒くさい概念（タイムゾーン、Free/Busy、参加者と参加不参加、繰り返しタスクなど）がありますので、車輪があるなら再発明しないで利用するのがお得です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;5. GCP 上にバッチ処理を設置する&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Pub/Sub の作成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;トピックを作成し、トピックの名前を確認しておきます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-33-11.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-33-18.png"/&gt;&lt;/p&gt;
&lt;p&gt;作成したトピックに対する、Pull タイプのサブスクリプションを作成します。サブスクライバとなる CloudFunction 宛のメッセージングを定義する事に相当します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-33-24.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-33-42.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cloud Schedule の登録&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先ほど作成した Pub/Sub トピックをターゲットとするスケジュールを作成します。スケジュールが、Pub/Sub に対するパブリッシャとなる事に相当します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-33-59.png"/&gt;&lt;/p&gt;
&lt;p&gt;作成したら、試しにジョブを実行して Publish メッセージングが成功する事を確認しておきます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-34-05.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python スクリプトのデプロイ準備をする&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cloud Storage に、非公開バケット &lt;code&gt;function-codes&lt;/code&gt; を 1 つ作ります。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-34-31.png"/&gt;&lt;/p&gt;
&lt;p&gt;次に、&lt;a href="https://github.com/coleyon/gcalapi-caldav-sample"&gt;スクリプト&lt;/a&gt;の &lt;code&gt;credentials.json&lt;/code&gt; を、先の手順で取得したサービスアカウントの JSON 形式の鍵に差し替えて、&lt;code&gt;Pipfile&lt;/code&gt;, &lt;code&gt;Pipfile.lock&lt;/code&gt;, &lt;code&gt;main.py&lt;/code&gt;および、差し替え後の &lt;code&gt;credential.json&lt;/code&gt; を 1 つの Zip ファイル &lt;code&gt;gcalendar-fetcher.zip&lt;/code&gt; に圧縮し、先に作成した Cloud Storage のバケットにアップロードします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-34-37.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python スクリプトを Functions にデプロイする&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;バケット内の Zip ファイル &lt;code&gt;gcalendar-fetcher.zip&lt;/code&gt; をソースとする関数を定義します。トリガーには、Pub/Sub に作成したトピック &lt;code&gt;test-getting-gcal-events&lt;/code&gt; トピックを指定します。実行する関数には &lt;a href="https://github.com/coleyon/gcalapi-caldav-sample/blob/master/main.py#L124"&gt;main 関数&lt;/a&gt; を指定します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-35-06.png"/&gt;&lt;/p&gt;
&lt;p&gt;また、環境変数は &lt;a href="https://github.com/coleyon/gcalapi-caldav-sample#environment-variables"&gt;こちらに定義した変数&lt;/a&gt; を与えます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-35-15.png"/&gt;&lt;/p&gt;
&lt;h1&gt;6. 実行して結果を確認してみる&lt;/h1&gt;
&lt;p&gt;Cloud Scheduler に作成したタスクが実行済の場合は結果欄に「成功」が出ていると思います。まだスケジュールが走っていない場合は、実行ボタンを押下し発火させた結果を同様に確認します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-35-23.png"/&gt;&lt;/p&gt;
&lt;p&gt;また、Function にデプロイしたスクリプトが、Pub/Sub メッセージングを介して実行されていることも確認します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-35-29.png"/&gt;&lt;/p&gt;
&lt;p&gt;いずれも成功なら、CalDAV サーバに登録されたはずのカレンダー情報を閲覧してみます。radicale から ical をダウンロードして中身を確認してみましょう。ical フォーマットのデータが得られます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;BEGIN&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;VCALENDAR&lt;/span&gt;
&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;span class="nv"&gt;PRODID&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;PYVOBJECT&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;NONSGML&lt;/span&gt; &lt;span class="nv"&gt;Version&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;EN&lt;/span&gt;
&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;WR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;CALDESC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;TEXT&lt;/span&gt;&lt;span class="s s-Atom"&gt;:test&lt;/span&gt;
&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;WR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;CALNAME&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;TEXT&lt;/span&gt;&lt;span class="s s-Atom"&gt;:test&lt;/span&gt;
&lt;span class="nv"&gt;BEGIN&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;VEVENT&lt;/span&gt;
&lt;span class="nv"&gt;UID&lt;/span&gt;&lt;span class="s s-Atom"&gt;:xxxxxxxxxxxxxxxxxxx@google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;com&lt;/span&gt;
&lt;span class="nv"&gt;DTSTART&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20190913&lt;/span&gt;&lt;span class="nv"&gt;T013000Z&lt;/span&gt;
&lt;span class="nv"&gt;DTEND&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20190913&lt;/span&gt;&lt;span class="nv"&gt;T084500Z&lt;/span&gt;
&lt;span class="nv"&gt;DTSTAMP&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20190726&lt;/span&gt;&lt;span class="nv"&gt;T050838Z&lt;/span&gt;
&lt;span class="nv"&gt;LAST&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;MODIFIED&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20190726&lt;/span&gt;&lt;span class="nv"&gt;T050856Z&lt;/span&gt;
&lt;span class="nv"&gt;STATUS&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;CONFIRMED&lt;/span&gt;
&lt;span class="nv"&gt;SUMMARY&lt;/span&gt;&lt;span class="s s-Atom"&gt;: 展示会にいく&lt;/span&gt;
&lt;span class="nv"&gt;TRANSP&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;OPAQUE&lt;/span&gt;
&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="nn"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="s s-Atom"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;calendar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;event?eid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;XXXXXXXXXXXXXXXXXXXXXXXX&lt;/span&gt;
&lt;span class="nv"&gt;END&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;VEVENT&lt;/span&gt;
&lt;span class="nv"&gt;BEGIN&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;VEVENT&lt;/span&gt;
&lt;span class="nv"&gt;UID&lt;/span&gt;&lt;span class="s s-Atom"&gt;:yyyyyyyyyyyyyyyyyyyyyyyyyy@google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;com&lt;/span&gt;
&lt;span class="nv"&gt;DTSTART&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20191004&lt;/span&gt;&lt;span class="nv"&gt;T040000Z&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nv"&gt;END&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;VEVENT&lt;/span&gt;
&lt;span class="nv"&gt;END&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;VCALENDAR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thunderbird の Lightning 拡張でネットワークカレンダーとして見る方法もあります。
&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-35-41.png"/&gt;
環境変数 &lt;code&gt;CALDAV_SERVER_URL&lt;/code&gt; に与えた URL が、ネットワークカレンダーの場所に相当します。
&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-35-47.png"/&gt;
&lt;img alt="" class="image-process-article-image" src="/images/derivatives/article-image/copy-gcal-to-caldav-with-gcp-2021-05-29-22-35-52.png"/&gt;&lt;/p&gt;
&lt;p&gt;よく採れてます、使えそうですね。&lt;/p&gt;</content><category term="programming"/><category term="GoogleAPI"/><category term="python"/><category term="PubSub"/><category term="CloudFunctions"/><category term="CalDAV"/></entry><entry><title>screen コマンドを使った linux terminal セッション共有</title><link href="https://coleyon.github.io/screen.html" rel="alternate"/><published>2017-10-22T12:00:00+09:00</published><updated>2017-10-22T12:00:00+09:00</updated><author><name>coleyon</name></author><id>tag:coleyon.github.io,2017-10-22:/screen.html</id><summary type="html">&lt;p&gt;Screenコマンドを使うと、Linuxコンソールを複数ユーザセッション間で共有できます。&lt;/p&gt;</summary><content type="html">&lt;p&gt;Screen コマンドを使うと、Linux コンソールを複数ユーザセッション間で共有できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考&lt;ul&gt;
&lt;li&gt;みやすい概要&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mistymagich.wordpress.com/2011/11/08/multiuser_screen_command"&gt;https://mistymagich.wordpress.com/2011/11/08/multiuser_screen_command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multiuser mode 権限制御系操作&lt;ul&gt;
&lt;li&gt;&lt;a href="http://aperiodic.net/screen/multiuser"&gt;http://aperiodic.net/screen/multiuser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユースケース&lt;ul&gt;
&lt;li&gt;Dev チームのペアプログラミングよろしく、Ops チームにも部下育成やダブルチェックを兼ねて、Linux サーバオペレーションを複数名で行う場合があります。そんな時は、物理コンソールに人が集まって行うのもよいですが、ターミナルのセッションを SSH で皆が共有できる Screen を使うと捗ります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;環境例&lt;ul&gt;
&lt;li&gt;Debian Jessie +&lt;/li&gt;
&lt;li&gt;共有元ユーザ : parent&lt;/li&gt;
&lt;li&gt;共有先ユーザ : child&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;事前準備&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;screen インストール&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudoer@test:~$ sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install screen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;screen セッションを各ユーザで共有可能にする設定&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## sudoer console&lt;/span&gt;
sudoer@test:~$ sudo chmod u+s /usr/bin/screen
sudoer@test:~$ sudo chmod &lt;span class="m"&gt;755&lt;/span&gt; /var/run/screen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;セッション公開&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;screen セッション share を立てる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## parent console&lt;/span&gt;
parent@test:~$ screen -S share
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;child ユーザへ share セッションを共有する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## parent console&lt;/span&gt;
parent@test:~$
&lt;span class="o"&gt;(&lt;/span&gt;Ctrl+a&lt;span class="o"&gt;)&lt;/span&gt; 
:multiuser on
Multiuser mode enabled
parent@test:~$
&lt;span class="o"&gt;(&lt;/span&gt;Ctrl+a&lt;span class="o"&gt;)&lt;/span&gt; 
:acladd child
parent@test:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;セッション参加&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;parent ユーザが立てた screen のセッション名を確認し、乗り込む&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## child console&lt;/span&gt;
child@test:~$ screen -ls parent/
There is a suitable screen on:
        &lt;span class="m"&gt;1448&lt;/span&gt;.share      &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;03&lt;/span&gt;/07/2017 &lt;span class="m"&gt;10&lt;/span&gt;:49:09 AM&lt;span class="o"&gt;)&lt;/span&gt;        &lt;span class="o"&gt;(&lt;/span&gt;Multi, attached&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt; Socket &lt;span class="k"&gt;in&lt;/span&gt; /var/run/screen/S-parent.
child@test:~$ screen -x parent/share
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;ログアウトとデタッチの動作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;parent ユーザが screen セッションとして起動されている login セッションからログアウトする&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## parent console&lt;/span&gt;
parent@test:~$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;screen is terminating&lt;span class="o"&gt;]&lt;/span&gt;
parent@test:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;child ユーザが screen セッションとして起動されている login セッションからログアウトする&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## child console&lt;/span&gt;
parent@test:~$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;screen is terminating&lt;span class="o"&gt;]&lt;/span&gt;
child@test:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;parent ユーザが screen セッション share をデタッチする&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## parent console&lt;/span&gt;
parent@test:~$
&lt;span class="o"&gt;(&lt;/span&gt;Ctrl+A&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;d&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;detached from &lt;span class="m"&gt;1448&lt;/span&gt;.share&lt;span class="o"&gt;]&lt;/span&gt;
parent@test:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;child ユーザが screen セッション share をデタッチする&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## child console&lt;/span&gt;
parent@test:~$
&lt;span class="o"&gt;(&lt;/span&gt;Ctrl+A&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;d&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;detached from &lt;span class="m"&gt;1448&lt;/span&gt;.share&lt;span class="o"&gt;]&lt;/span&gt;
child@test:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="howto"/><category term="linux"/><category term="screen"/><category term="terminal"/></entry></feed>